// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

console.log("reason workshop");

console.log("Reason workshop");

function getTitle(language) {
  return language + " workshop";
}

function demo_addInts(int1, int2) {
  return int1 + int2 | 0;
}

function demo_concatStrings(string1, string2) {
  return string1 + (" " + string2);
}

var demo = {
  addInts: demo_addInts,
  concatStrings: demo_concatStrings,
  title: "Hello"
};

function operators_000(a, b) {
  return a + b | 0;
}

var operators_001 = /* :: */[
  Caml_int32.imul,
  /* [] */0
];

var operators = /* :: */[
  operators_000,
  operators_001
];

function add(a) {
  return a + 2 | 0;
}

function multiply(a) {
  return Caml_int32.imul(a, 5);
}

function compute(operationFunc, value) {
  return Curry._1(operationFunc, value);
}

function computeRec(operationFunc, _x, _recCount) {
  while(true) {
    var recCount = _recCount;
    var x = _x;
    if (recCount !== 0) {
      console.log("COUNT => " + String(x));
      _recCount = recCount - 1 | 0;
      _x = Curry._1(operationFunc, x);
      continue ;
    }
    console.log("HERE => " + String(x));
    return x;
  };
}

console.log(computeRec(add, 4, 10));

function composte(func1, func2, value) {
  return Curry._1(func1, Curry._1(func2, value));
}

console.log(52);

var temp2 = 30;

var temp = 52;

exports.getTitle = getTitle;
exports.demo = demo;
exports.operators = operators;
exports.add = add;
exports.multiply = multiply;
exports.compute = compute;
exports.temp2 = temp2;
exports.computeRec = computeRec;
exports.composte = composte;
exports.temp = temp;
/*  Not a pure module */
